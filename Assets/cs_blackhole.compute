// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//computeShader 파일 내에서 다루기 위한 자료형
struct Particle {
	float4 pos;
	float4 vel;
};
//버퍼에 쓸 수 있는 변수는 RWStructuredBuffer
//c.f. 읽기만 가능한 변수는 StructuredBuffer
RWStructuredBuffer<Particle> particles;
//블랙홀 중심 좌표
float3 bh1;
float3 bh2; 
//로컬 스레드 사이즈
[numthreads(1000, 1, 1)]
//위의 #pragma kernel 에서 정의한 커널 
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float Gravity = 1000.0;
	float ParticleMass = 0.1;
	float ParticleInvMass = 10.0;
	float DeltaT = 0.0005f; 
	//여러번 버퍼에 접근하는 비용을 줄이기 위해 벡터를 가져옴
	float3 p = particles[id.x].pos.xyz;
	//입자와 첫번째 블랙홀과의 거리를 구함
	float3 d = bh1 - p;
	float dist = length(d);
	//입자에 가해지는 힘을 블랙홀 중심의 중력에 비례하게 하고(스칼라),\
	입자와 블랙홀 중심간의 정규화된 벡터를 곱해 힘 벡터로 변환
	float3 force = (Gravity / dist)*normalize(d);

	//위의 과정을 두번째 블랙홀 중심에도 적용
	d = bh2 - p;
	dist = length(d);
	force += (Gravity / dist)*normalize(d);
	//중심에서 너무 멀어진 입자들에 대해서 화면의 중심으로 다시 재배치	
	if (dist >45.0f) {
		particles[id.x].pos = float4(0, 0, 0, 1);
	}
	else {
		//오일러 방법을 이용한 수치적분
		float3 a = force* ParticleInvMass;
		particles[id.x].pos = float4(
			p + particles[id.x].vel.xyz*DeltaT + 0.5*a*DeltaT*DeltaT, 1.0);
		particles[id.x].vel = float4(particles[id.x].vel.xyz + a*DeltaT, 0.0);
	}
}
